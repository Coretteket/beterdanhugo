var Rts = [1.7355679702048417, 1.929383116883117, 1.8795345653661877, 2.0273573923166475, 1.999517141477547, 1.915492957746479, 2.1394557823129254, 2.236842105263158, 2.1914279369309346, 2.221305595408895, 2.2676563851253966, 2.246981717833736, 2.1894901527701087, 2.1478700468366667, 2.101940867041538, 1.9963337296868806, 1.968768074031232, 1.833333333333333, 1.877580683436165, 1.8978273486588102, 1.6670232110386136, 1.479228402634907, 1.4993196575896937, 1.4396542274143789, 1.4227602487333026, 1.506529875507658, 1.5052483158389471, 1.460028019788976, 1.491229828605793, 1.4375661665388966, 1.4435595538808839, 1.4158573058304813, 1.3590540982906592, 1.265216150000332, 1.1776459313249519, 1.0918794181579057, 1.0289079549191353, .9325593560889777, .8913547811729826, .8571578162824073, .7872981250277411, .7663245033112582, .753409335639802, .7479246441203122, .7218053791988918, .7476673593285253, .7633494104117677, .7336654445215167, .7162064437551147, .7120418848167541, .7390280453864269, .7212685218648356, .7149196249162761, .735353432858538, .7306074891519793, .7132847335267889, .7141634381475811, .7322694188287386, .6969289019772823, .6958243018110813, .7179888225532647, .7195269860521527, .7053217689260091, .707006804269167, .7307097273254689, .7249616760347469, .7454511044421015, .7785152689152234, .8056573966437154, .7732981857652348, .7714647695156417, .7754970043572986, .802188402181274, .8190893234868448, .8400200215616818, .871723479575196, .9552988242978445, .9301808295917949, .934831648425098, .8931262168797087, .9070109424332857, .9244193733198184, .8391354931090031, .8492764344167552, .8121752395480766, .8226757144979939, .7781543675858883, .8232038261056478, .8373349674112864, .7581620314389359, .7625098323954741, .7471731673230847, .7738525357955308, .7186405045550105, .7048340387614168, .7084122474747475, .7217799379870946, .6410506699795901, .6481835564053536, .7197655285890581, .7211025166140103, .6769355024806737, .658936721351918, .7028064601535611, .6291344123856438, .5941015506232897, .5689940436796824, .5844649646931016, .6800947867298579, .818565400843882, .851138353765324, .9199007220216608, 1.0126117862875486, .989707227813358, .9472839789135916, .9085012740328933, .9115148655025955, 1.098486668268076, .9941107184923438, .9964622641509435, 1.1357092282275194, 1.1688878676470589, 1.1500333407423873, 1.1068191627104016, .9587999154870058, .9456753302087773, .9256945940124919, .8174464363795366, .853641933287951, .9240299205236091, .9287918347970567, .7856970864435348, .9132075471698112, .9193548387096775, .8568826437678896, .8178408786498793, .8401445649152073, .8506605399195865, .9348727057430433, 1.1574685062987402, 1.10758941552777, 1.1651010532308566, 1.1129787820336183, 1.1845863648612232, 1.1858108108108107, 1.1779002756201455, 1.0435518993467214, 1.0599664188054692, 1.0616259777198387, 1.3605712947787403, 1.4007425202009176, 1.350788515972503, 1.4128093708671832, 1.1457242582897034, 1.2424961845005935, 1.2967814976548602, 1.2816793893129768, 1.195114900997254, 1.2232577549033248, 1.2716378162450064, 1.2595352361707501, 1.3697922919918357, 1.3856903297931804, 1.1141670991177994, 1.0801623541349565, 1.0988714670927797, 1.1361277054157282, 1.1763752502621792, 1.085182797679344, 1.0452734516479536, 1.0744795405599425, 1.1321839080459772, 1.1214574898785425, 1.142124295685813, 1.0613296262981435, 1.0949188141206883, 1.0190264785159346, .9968409413994628, 1.034771613718982, .9890127138596765, .8949976403964133, .8674379368522536, .8828092762234876, .8453477562748246, .868753815296067, .8517821959519972, .8795569912321181, 1.0184414601853602, 1.1008197493639875, 1.1302299806040454, 1.2371950670627416, 1.3003609487796495, 1.3376570733684638, 1.398693803159174, 1.5109720073146713, 1.5229404632761152, 1.5300404390525708, 1.6168712457560719, 1.5914353466313294, 1.6263772816099122, 1.6262932308601832, 1.478098115190123, 1.4552538512257984, 1.5039281397648612, 1.5053277768073268, 1.477302087346735, 1.4716044274335365, 1.5016637047680268, 1.3896840260476622, 1.379680252482586, 1.3866609383564685, 1.3240466990277913, 1.2378800010331379, 1.1950245321630215, 1.2097126314040956, 1.2248995069291821, 1.2033955561367375, 1.14282722513089, 1.1290874292462436, 1.1272775991425512, 1.137279950449535, 1.1140195542829152, 1.1086686251577076, 1.1210938556247576, 1.0992660647341466, 1.1299939597894553, 1.1580700234645047, 1.1968009652541127, 1.1900541218919132, 1.1508281948978358, 1.122351974649375, 1.0993455722304961, 1.098322790808697, 1.065581107133021, 1.0757755955010364, 1.0949623430962343, 1.0660263316952672, 1.0241210722205651, 1.0332653614341212, 1.051186881799009, 1.028935111742833, .99195614046156, .9782623806484634, .9728045289820579, .964934335634883, .9689602652836955, .9661473994606863, .9594710730887926, .9565143190962855, .9561328000847549, .9488306535113794, .9421261144519358, .9363614016879251, .9404169087337816, .9236691981940992, .9174035426914219, .942107545533391, .9163485865543515, .9055551424109467, .8952853786098687, .8997421942136923, .8896323976709829, .8940888490341968, .9379338235900991, .9175560142741335, .9180432344243907, .9215152693188199, .9340430760589093, .919686930226353, .9593235046868362, .9884260314046426, .9659739666590543, .9588889910788191, .9432471530843133, .9765035830863316, .9570732534798465, .9773288973384029, .9880160041251685, .9724328049620949, .9703549703549702, .9807319907048798, 1.002235570848156, .9741566920565833, .980760967225282, .9920099605890078, .9967104940150632, 1.0126753920528238, 1.053856708811134, 1.0487253827730318, 1.0510880212034497, 1.0633567178083232, 1.0918042635476999, 1.097845824845373, 1.0835367507458635, 1.1241352327091003, 1.1423427331887201, 1.1570897064902852, 1.2031818739519855, 1.2255881405091849, 1.2051698592841618, 1.203909867864961, 1.1630872390048868, 1.1614984908881916, 1.1227143675765785, 1.1173595530612634, 1.094796000745203, 1.0401930730179239, 1.0287179115125573, .9854525343849186, .9594557117708055, .9201327473970204, .8936347632724914, .8888299852951385, .8497043788082207, .8425843975218107, .8434451010031604, .829163799890767, .8396809776302453, .8665781487101669, .9193190056359769, .9235815644981105, .9365163657429759, .9618600557429955, .963127207029646, .9665348467800647, .9867153077967399, 1.010397180652058, .9632061870275768, .938838048862396, .9405880003059847, .9698937680099781, .9769806585608585, .9767003121114908, .9884266335915868, .9759240776733028, .9464248011823492, .9538922581677842, .9474047946004649, .9307451585105901, .9351073419304993, .9541036465468237, .9399936043340045, .9544009291167679, .9564310967642765, .9616208410463165, .9363701178837573, .9272896345685849, .944737793125602, .9227528802720396, .9273658923839866, .9349786575159019, .9659744967723469, .9812164484146042, 1.0048207226798933, 1.041097209884735, 1.0442120906533625, 1.0269365937835393, 1.0352694924123496, 1.0187063518456931, .9853495402965294, 1.001090331356891, 1.0119910300865846, .994044721551894, .981283311557685, .9705965007233781, .971417204120948, .9861002885243139, .9959874131486137, 1.011730391224399, .9879280533063429, .9892727676259526, .9689141670903237, .9928060620916775, 1.0228403099451406, 1.030864197530864, 1.0574427420461863, 1.049326137111002, 1.0471902911015547, 1.0675890178086822, 1.0717396356434843, 1.038400621582046, 1.038898774219059, 1.0406583813157817, 1.0387736436522148, 1.0489027063037666, 1.0749622320387051, 1.0886919004465212, 1.0768718124346288, 1.0943499425696002, 1.107902082885978, 1.0992730775967767, 1.0915437924549367, 1.1008188633737848, 1.0867157146399935, 1.0917379009978223, 1.1137832532754575, 1.1439404578008707, 1.1227363727363726, 1.1057695866178157, 1.105100642926002, 1.0987484293249468, 1.0635594695255666, 1.0739666325246955, 1.0967328939257432, 1.0465181188072754, 1.0354558563066651, 1.0386712518632808, 1.0465164559261446, 1.0287003528889973, 1.0450257563943606, 1.0626761678543148, 1.0635267181302939, 1.0448466503999754, 1.0305503345843257, 1.0491678583381505, 1.041819573247525, 1.0530958114964235, 1.0591310106672345, 1.055430234460834, 1.0708906267159115, 1.055594816089727, 1.0555189187056482, 1.0527072753321032, 1.04446209688986, 1.0494286182951502, 1.0142665323934206, .9963827777027939, .9854666083169901, .9762669802170649, .9459104841651377, .942567009741868, .9426791311949131, .9098533321317532, .9097181991820721, .878968427816233, .872494028769657, .8561959813503204, .8799246089722913, .884001244232464, .879753469734363, .8786597510655509, .8938949539143216, .919140727875807, .8915489187448905, .8988322819680374, .9121032569724875, .8801438274071115, .8620076198872759, .847931676515826, .8563950139012968];

var indexlist = [.0556, .0556, .0556, .0556, .0556, .0556, .0556, .0556, .1111, .1111, .1111, .1111, .2083, .2083, .4537, .537, .537, .537, .6111, .6111, .6111, .6111, .6111, .6111, .6111, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .713, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .6296, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .5926, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .3981, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .5093, .4815, .4815, .4815, .4815, .4815, .4815, .4815, .4815, .4815, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6204, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .6574, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .5648, .713, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .8241, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .787, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .75, .713, .713, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6759, .6204, .6204, .6204, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3241, .3611, .3611, .3611, .3611, .3611, .3611, .3611, .3611, .3611, .3611, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4722, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167, .4167];

var ans = 0;
var f = false

function lin(y1, y2, x1, x2) {
    if (f) {
        return;
    }
    if (x2 == -1) {
        x2 = 999999;
    }
    if (day >= x1 && day < x2 && y1 == y2) {
        ans = y1;
        f = true;
    } else if (day >= x1 && day < x2) {
        ans = (y2 - y1) / (x2 - x1) * (day - x1) + y1;
        f = true;
    }
}

function siMe(arr) { //simplemeasure
    var par = arr[0];
    var ch = arr[1];
    var bck = arr[2];
    var delay = arr[3];
    if (ch == 1) {
        return 1;
    } else if (par > 0) {
        f = !1;
        lin(1, ch, par, par + delay);
        lin(ch, ch, par + delay, -1);
        return ans;
    } else if (par < 0) {
        f = !1;
        lin(ch, bck, -par, -par + delay * 2 / 3);
        lin(bck, 1, -par + delay * 2 / 3, -par + delay);
        lin(1, 1, -par + delay, -1);
        return ans;
    } else {
        return 1;
    }
}

var a = { // active, eff, boost, delay, impact, no. days, ever used
    workhome: [0, .95, 1, 3, 3, 0], //a
    socdis: [0, .95, 1, 3, 4, 0], //b
    masks: [0, .9, 1.1, 3, 2, 0], //c

    events: [0, .85, 1.1, 7, 7, 0], //d
    theater: [0, .9, 1.05, 7, 4, 0], //e
    gather: [0, .9, 1.1, 7, 7, 0], //f

    horeca: [0, .85, 1.05, 7, 9, 0], //g
    clubs: [0, .9, 1.2, 7, 4, 0], //h
    shops: [0, .85, 1.05, 7, 8, 0], //i

    edlow: [0, .925, 1, 7, 10, 0], //j
    edmid: [0, .875, 1.1, 7, 7, 0], //k
    eduni: [0, .815, 1.1, 7, 5, 0], //l

    lockdown: [0, .85, 1.05, 7, 15, 0], //m
    curfew: [0, .925, 1.1, 7, 10, 0], //n
    border: [0, .95, 1.1, 7, 8, 0] //o
}

var c = { //gemaakte keuzes
    jan11warning: [0, 1]
}


var r = { //changes in covid dynamic rates, like undercounting
    death: () => {
        f = !1;
        lin(1, 1, 0, 120);
        lin(1, 0.6, 120, 180);
        lin(0.6, 0.6, 180, -1);
        return ans;
    },
    underdeath: () => {
        f = !1;
        lin(0, 0.2, 0, 35);
        lin(0.2, 0.6, 35, 45);
        lin(0.6, 0.6, 45, -1)
        return ans;
    },
    deathday: () => {
        var wday = new Date(epoch + day * 8.64e7).getDay();
        var weff = [0.786, 0.799, 1.181, 1.106, 1.027, 1.045, 1.057]
        return weff[wday];
    },
    testratio: () => {
        f = !1;
        lin(40, 40, 0, 120);
        lin(40, 12, 120, 160);
        lin(12, 12, 160, -1);
        return ans;
    },
    testcapacity: () => {
        f = !1;
        lin(0, 100, 10, 20);
        lin(100, 750, 20, 30);
        lin(750, 4000, 30, 40);
        lin(4000, 10000, 40, 120)
        lin(10000, 20000, 120, 160);
        lin(20000, 100000, 160, 220);
        lin(100000, 100000, 220, -1);
        return ans + Math.sqrt(s.I) / 4;
    },
    testday: () => {
        var wday = new Date(epoch + day * 8.64e7).getDay();
        var weff = [1.008, 0.901, 0.863, 0.988, 1.088, 1.092, 1.048];
        return weff[wday];
    },
    season: () => {
        // return Math.cos(2 * Math.PI / 365 * day) * 0.2 + 1;
        return Math.cos(0.0172 * day) * .2 + 1;
    },
    scare: () => {
        if (day < 90) {
            return (-(((day / 90) - 1) ** 2) + 1) * 0.3 + 0.7;
        } else {
            return 1;
        }
    },
    hosp: () => {
        f = !1;
        lin(0.001, 0.001, 0, 25);
        lin(0.001, 0.017, 25, 50);
        lin(0.017, 0.01, 50, 73);
        lin(0.01, 0.005, 73, 164);
        lin(0.005, 0.005, 164, -1);
        return ans;
    },
    hospratio: () => {
        f = !1;
        lin(10, 100, 0, 30);
        lin(100, 100, 30, 120);
        lin(100, 20, 120, 160);
        lin(20, 20, 160, -1);
        return ans;
    },
    hospcapacity: () => {
        f = !1;
        lin(100, 1000, 0, 40);
        lin(1000, 1000, 40, -1);
        return ans;
    },
    hospday: () => {
        var wday = new Date(epoch + day * 8.64e7).getDay();
        var weff = [0.908, 0.875, 1.104, 1.031, 1.048, 1.028, 1.006]
        return weff[wday] //* ans;
    }
}

var v = [ // age specific info for vax
    { perc: 0.10185, aifr: 0.00048, vax: 0 }, // 0 - 9
    { perc: 0.11503, aifr: 0.00161, vax: 0 }, // 10 - 19
    { perc: 0.12831, aifr: 0.00538, vax: 0 }, // 20 - 29
    { perc: 0.12339, aifr: 0.01788, vax: 0 }, // 30 - 39
    { perc: 0.12685, aifr: 0.06265, vax: 0 }, // 40 - 49
    { perc: 0.14548, aifr: 0.22048, vax: 0 }, // 50 - 59
    { perc: 0.12143, aifr: 0.87891, vax: 0 }, // 60 - 69
    { perc: 0.09044, aifr: 2.81399, vax: 0 }, // 70 - 79
    { perc: 0.03977, aifr: 10.0284, vax: 0 }, // 80 - 89
    { perc: 0.00746, aifr: 26.3875, vax: 0 }, // 90+
]

var s = { // spread info
    a: 0,
    b: 1 / 5,
    c: 1 / 365,

    Rt: 1,

    N: 17500000, //population
    S: 17500000 - 1000, //susceptible
    I: 1000, //infectious
    R: 0, //removed
    F: 0, //real fatalities

    Ss: [17500000 - 1000],
    Is: [1000],
    Rs: [0],
    Fs: [0],

    dSs: [0],
    dIs: [0],
    dRs: [0],
    dFs: [0],

    P: 0, //positive tests
    H: 0, //hospitalisations
    D: 0, //counted deaths

    Ps: [0],
    Hs: [0],
    Ds: [0],
}

var b = { //preset constant beginning values
    Ps: [0, 1, 1, 3, 5, 4],
    Hs: [0, 1, 0, 1, 0, 1, /*1, 3, 5, 7, 12, 4, 12, 15, 23*/ ],
    Ds: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, /*0, 3, 3, 7, 4*/ ],
    Rts: [1.73556, 1.92938, 1.87953, 2.02735, 1.99951, 1.91549, 2.13945, 2.23684, 2.19142, 2.22130, 2.26765]
}

function calcIFR() {
    var ifr = 0.0105;
    return ifr * r.death();

}

function calcIHR() {
    return r.hosp();
}

function calcR() {
    var R0 = 2.5;
    if (day + 1 < b.Rts.length) {
        R0 = b.Rts[day]
    } else {
        R0 *= r.season();
        R0 *= r.scare();
        var mult = 1;
        for (const [key, value] of Object.entries(a)) { mult *= siMe(a[key]); }
        for (const [key, value] of Object.entries(c)) { mult *= siMe(c[key]); }
        R0 = mult > 1.2 ? 1.2 * R0 : mult * R0;
    }
    s.Rt = R0;
    return s.Rt * randBetween(0.9, 1.1);
    // return Rts[day] / s.S * s.N;
}

function calcCOV() {
    s.a = calcR() * s.b;

    var dS = s.R * s.c;
    var dI = s.a * s.S * s.I / s.N;
    var dR = s.b * s.I * (1 - calcIFR());
    var dF = s.b * s.I * calcIFR();

    s.dSs.push(dS);
    s.dIs.push(dI);
    s.dRs.push(dR);
    s.dFs.push(dF);

    s.S += dS - dI;
    s.I += dI - dR - dF;
    s.R += dR - dS;
    s.F += dF;

    s.Ss.push(s.S);
    s.Is.push(s.I);
    s.Rs.push(s.R);
    s.Fs.push(s.F);

    if (day - 10 < b.Ps.length && day >= 10) { s.P = b.Ps[day - 10] } else {
        s.P = Math.round(s.I / s.N * r.testratio() * r.testcapacity() / (s.I / s.N * (r.testratio() - 1) + 1) * r.testday() * randBetween(.9, 1.1));
    };
    if (day - 10 < b.Hs.length && day >= 10) { s.H = b.Hs[day - 10] } else {
        // s.H = Math.round(s.dIs[day - 7] * calcIHR() * randBetween(0.8, 1.2));
        // s.H = Math.round((s.Is[day - 7] / s.N * r.hospratio() * r.hospcapacity()) / (s.Is[day - 7] / s.N * (r.hospratio() - 1) + 1) * r.hospday() * randBetween(0.8, 1.2));
        s.H = Math.round(s.dIs[day - 7] * calcIHR() * randBetween(0.95, 1.05));
        s.H = s.H > 300 ? Math.round(1600 - 1600 / (1 + s.H / 1e3)) : s.H;
        s.H = Math.round(s.H * r.hospday());
    };
    if (day - 10 < b.Ds.length && day >= 10) { s.D = b.Ds[day - 10] } else {
        s.D = s.dFs[day - 7] * r.underdeath() * randBetween(0.8, 1.2);
        s.D = s.D > 300 ? 1200 - 1200 / (1 + s.D / 1e3) : s.D;
        s.D = Math.round(s.D * r.deathday());
    };

    s.Ps.push(s.P);
    s.Hs.push(s.H);
    s.Ds.push(s.D);
}

var maxIndex = 0;
var stringency = 0;
var index = 0;

for (const [key, value] of Object.entries(a)) {
    if (key == "curfew") continue;
    maxIndex += value[4];
}

function getIndex() {
    index = 0;
    for (const [k, v] of Object.entries(a)) {
        index += v[0] > 0 ? v[4] / maxIndex : 0;
    }
    index = Math.round(index * 1e4) / 1e4;
}

function getStringency() {
    stringency = 0;
    for (const [k, v] of Object.entries(a)) {
        stringency += v[4] * v[5] / maxIndex / (day - 13);
    }
    stringency = Math.round(stringency * 1e4) / 1e4;

}